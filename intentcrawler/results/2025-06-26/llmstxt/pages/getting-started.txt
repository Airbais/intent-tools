# Getting-Started

## Installation - FastMCP

URL: https://gofastmcp.com/getting-started/installation

--- title Installation - FastMCP sitename FastMCP date 2024-05-29 --- We recommend using uv to install and manage FastMCP. If you plan to use FastMCP in your project, you can add it as a dependency with Alternatively, you can install it directly with pip or uv pip  To verify that FastMCP is installed correctly, you can run the following command You should see output like the following Upgrading from the official MCP SDKs FastMCP 1.0 to FastMCP 2.0 is generally straightforward. The core server API is highly compatible, and in many cases, changing your import statement from from mcp.server.fastmcp import FastMCP to from fastmcp import FastMCP will be sufficient. Prior to fastmcp2.3.0 and mcp1.8.0 , the 2.x API always mirrored the official 1.0 API. However, as the projects diverge, this can not be guaranteed. You may see deprecation warnings if you attempt to use 1.0 APIs in FastMCP 2.x. Please refer to this documentation for details on new capabilities. While we make every effort not to introduce backwards-incompatible changes to our public APIs and behavior, FastMCP exists in a rapidly evolving MCP landscape. Were committed to bringing the most cutting-edge features to our users, which occasionally necessitates changes to existing functionality. As a practice, breaking changes will only occur on minor version changes e.g., 2.3.x to 2.4.0. A minor version change indicates either For users concerned about stability in production environments, we recommend pinning FastMCP to a specific version in your dependencies. Whenever possible, FastMCP will issue deprecation warnings when users attempt to use APIs that are either deprecated or destined for future removal. These warnings will be maintained for at least 1 minor version release, and may be maintained longer. Note that the public API includes the public functionality of the FastMCP server, core FastMCP components like Tool , Prompt , Resource , and ResourceTemplate , and their respective public methods. It does not include private methods, utilities, or objects that are stored as private attributes, as we do not expect users to rely on those implementation details. If you plan to contribute to FastMCP, you should begin by cloning the repository and using uv to install all dependencies development dependencies are installed automatically This will install all dependencies, including ones for development, and create a virtual environment, which you can activate and use as normal. FastMCP has a comprehensive unit test suite, and all PRs must introduce and pass appropriate tests. To run the tests, use pytest FastMCP uses pre-commit to manage code quality, including formatting, linting, and type-safety. All PRs must pass the pre-commit hooks, which are run as a part of the CI process. To install the pre-commit hooks, run Alternatively, to run pre-commit manually at any time, use

Keywords: fastmcp, the, and, you, use, install, can, run, will, for

---

## Quickstart - FastMCP

URL: https://gofastmcp.com/getting-started/quickstart

--- title Quickstart - FastMCP sitename FastMCP date 2024-05-29 --- Welcome! This guide will help you quickly set up FastMCP and run your first MCP server. If you havent already installed FastMCP, follow the installation instructions. A FastMCP server is a collection of tools, resources, and other MCP components. To create a server, start by instantiating the FastMCP class. Create a new file called my_server.py and add the following code Thats it! Youve created a FastMCP server, albeit a very boring one. Lets add a tool to make it more interesting. To add a tool that returns a simple greeting, write a function and decorate it with mcp.tool to register it with the server To test the server, create a FastMCP client and point it at the server object. There are a few things to note here asyncio.run to run the client.async with client  before using the client. You can make multiple client calls within the same context.In order to run the server with Python, we need to add a run statement to the __main__ block of the server file. This lets us run the server with python my_server.py , using the default stdio transport, which is the standard way to expose an MCP server to a client. Why do we need the if __name__  __main__ block? Within the FastMCP ecosystem, this line may be unnecessary. However, including it ensures that your FastMCP server runs for all users and clients in a consistent way and is therefore recommended as best practice. Now that the server can be executed with python my_server.py , we can interact with it like any other MCP server. In a new file, create a client and point it at the server file To have FastMCP run the server for us, we can use the fastmcp run command. This will start the server and keep it running until it is stopped. By default, it will use the stdio transport, which is a simple text-based protocol for interacting with the server. Note that FastMCP does not require the __main__ block in the server file, and will ignore it if it is present. Instead, it looks for the server object provided in the CLI command here, mcp . If no server object is provided, fastmcp run will automatically search for servers called mcp, app, or server in the file. We pointed our client at the server file, which is recognized as a Python MCP server and executed with python my_server.py by default. This executes the __main__ block of the server file. There are other ways to run the server, which are described in the server configuration guide.

Keywords: the, server, fastmcp, and, run, with, mcp, file, client, this

---

## Welcome to FastMCP 2.0! - FastMCP

URL: https://gofastmcp.com/getting-started/welcome

--- title Welcome to FastMCP 2.0! - FastMCP description The fast, Pythonic way to build MCP servers and clients. sitename FastMCP date 2024-05-29 --- The fast, Pythonic way to build MCP servers and clients. The Model Context Protocol MCP is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and more with clean, Pythonic code FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the official MCP Python SDK in 2024. This is FastMCP 2.0, the actively maintained version that provides a complete toolkit for working with the MCP ecosystem. FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing the simplest path to production. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more. Ready to upgrade or get started? Follow the installation instructions, which include steps for upgrading from the official MCP SDK. The Model Context Protocol lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as the USB-C port for AI, providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can Resources think of these sort of like GET endpoints they are used to load information into the LLMs contextTools sort of like POST endpoints they are used to execute code or otherwise produce a side effectPrompts reusable templates for LLM interactionsFastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers. The MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. Its designed to be high-level and Pythonic in most cases, decorating a function is all you need. FastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities and is now part of the official MCP SDK, 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns. FastMCP aims to be  Fast High-level interface means less code and faster development  Simple Build MCP servers with minimal boilerplate  Pythonic Feels natural to Python developers  Complete A comprehensive platform for all MCP use cases, from dev to prod FastMCP is made with  by Prefect. This documentation is also available in llms.txt format, which is a simple markdown standard that LLMs can consume easily. There are two ways to access the LLM-friendly documentation In addition, any page can be accessed as markdown by appending .md to the URL. For example, this page would become httpsgofastmcp.comgetting-startedwelcome.md , which you can view here. Finally, you can copy the contents of any page as markdown by pressing CmdC or CtrlC on Windows on your keyboard.

Keywords: the, and, mcp, fastmcp, for, servers, protocol, with, can, pythonic

---

