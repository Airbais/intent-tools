# Tutorials

## How to Create an MCP Server in Python - FastMCP

URL: https://gofastmcp.com/tutorials/create-mcp-server

--- title How to Create an MCP Server in Python - FastMCP description A step-by-step guide to building a Model Context Protocol MCP server using Python and FastMCP, from basic tools to dynamic resources. sitename FastMCP date 2024-05-29 --- A step-by-step guide to building a Model Context Protocol MCP server using Python and FastMCP, from basic tools to dynamic resources. So you want to build a Model Context Protocol MCP server in Python. The goal is to create a service that can provide tools and data to AI models like Claude, Gemini, or others that support the protocol. While the MCP specification is powerful, implementing it from scratch involves a lot of boilerplate handling JSON-RPC, managing session state, and correctly formatting requests and responses. This is where FastMCP comes in. Its a high-level framework that handles all the protocol complexities for you, letting you focus on what matters writing the Python functions that power your server. This guide will walk you through creating a fully-featured MCP server from scratch using FastMCP. Every code block in this tutorial is a complete, runnable example. You can copy and paste it into a file and run it, or paste it directly into a Python REPL like IPython to try it out. Make sure you have FastMCP installed. If not, follow the installation guide. Every FastMCP application starts with an instance of the FastMCP class. This object acts as the container for all your tools and resources. Create a new file called my_mcp_server.py  Thats it! You have a valid though empty MCP server. Now, lets add some functionality. Tools are functions that an LLM can execute. Lets create a simple tool that adds two numbers. To do this, simply write a standard Python function and decorate it with mcp.tool . FastMCP automatically handles the rest add  as the tools name.a int , b int  to generate a JSON schema for the inputs.This is the core philosophy of FastMCP write Python, not protocol boilerplate. Resources provide read-only data to the LLM. You can define a resource by decorating a function with mcp.resource , providing a unique URI. Lets expose a simple configuration dictionary as a resource. When a client requests the URI resourceconfig , FastMCP will execute the get_config function and return its output serialized as JSON to the client. The function is only called when the resource is requested, enabling lazy-loading of data. Sometimes, you need to generate resources based on parameters. This is what Resource Templates are for. You define them using the same mcp.resource decorator but with placeholders in the URI. Lets create a template that provides a personalized greeting. Now, clients can request dynamic URIs greetingsFord will call personalized_greetingnameFord .greetingsMarvin will call personalized_greetingnameMarvin .FastMCP automatically maps the name placeholder in the URI to the name parameter in your function. To make your server executable, add a __main__ block to your script that calls mcp.run . Now you can run your server from the command line This starts the server using the default STDIO transport, which is how clients like Claude Desktop communicate with local servers. To learn about other transports, like HTTP, see the Running Your Server guide. Here is the full code for my_mcp_server.py click to expand Youve successfully built an MCP server! From here, you can explore more advanced topics

Keywords: the, fastmcp, mcp, server, you, and, python, that, this, can

---

## What is the Model Context Protocol (MCP)? - FastMCP

URL: https://gofastmcp.com/tutorials/mcp

--- title What is the Model Context Protocol MCP? - FastMCP description An introduction to the core concepts of the Model Context Protocol MCP, explaining what it is, why its useful, and how it works. sitename FastMCP date 2024-05-29 --- An introduction to the core concepts of the Model Context Protocol MCP, explaining what it is, why its useful, and how it works. The Model Context Protocol MCP is an open standard designed to solve a fundamental problem in AI development how can Large Language Models LLMs reliably and securely interact with external tools, data, and services? Its the bridge between the probabilistic, non-deterministic world of AI and the deterministic, reliable world of your code and data. While you could build a custom REST API for your LLM, MCP provides a specialized, standardized port for AI-native communication. Think of it as USB-C for AI a single, well-defined interface for connecting any compliant LLM to any compliant tool or data source. This guide provides a high-level overview of the protocol itself. Well use FastMCP, the leading Python framework for MCP, to illustrate the concepts with simple code examples. With countless APIs already in existence, the most common question is Why do we need another one? The answer lies in standardization. The AI ecosystem is fragmented. Every model provider has its own way of defining and calling tools. MCPs goal is to create a common language that offers several key advantages An MCP server exposes its capabilities through three primary components Tools, Resources, and Prompts. Tools are functions that the LLM can ask the server to execute. They are the action-oriented part of MCP. In the spirit of a REST API, you can think of Tools as being like POST requests. They are used to perform an action, change state, or trigger a side effect, like sending an email, adding a user to a database, or making a calculation. With FastMCP, creating a tool is as simple as decorating a Python function. Resources are data sources that the LLM can read. They are used to load information into the LLMs context, providing it with knowledge it doesnt have from its training data. Following the REST API analogy, Resources are like GET requests. Their purpose is to retrieve information idempotently, ideally without causing side effects. A resource can be anything from a static text file to a dynamic piece of data from a database. Each resource is identified by a unique URI. You can also create Resource Templates for dynamic data. A client could request users42profile to get the profile for a specific user. Learn more about Resources  Templates  Prompts are reusable, parameterized message templates. They provide a way to define consistent, structured instructions that a client can request to guide the LLMs behavior for a specific task. Beyond the core components, MCP also supports more advanced interaction patterns, such as a server requesting that the clients LLM generate a completion known as sampling, or a server sending asynchronous notifications to a client. These features enable more complex, bidirectional workflows and are fully supported by FastMCP. Now that you understand the core concepts of the Model Context Protocol, youre ready to start building. The best place to begin is our step-by-step tutorial. Tutorial How to Create an MCP Server in Python

Keywords: the, mcp, and, for, are, can, data, model, context, protocol

---

## How to Connect an LLM to a REST API - FastMCP

URL: https://gofastmcp.com/tutorials/rest-api

--- title How to Connect an LLM to a REST API - FastMCP description A step-by-step guide to making any REST API with an OpenAPI spec available to LLMs using FastMCP. sitename FastMCP date 2024-05-29 --- A step-by-step guide to making any REST API with an OpenAPI spec available to LLMs using FastMCP. Youve built a powerful REST API, and now you want your LLM to be able to use it. Manually writing a wrapper function for every single endpoint is tedious, error-prone, and hard to maintain. This is where FastMCP shines. If your API has an OpenAPI or Swagger specification, FastMCP can automatically convert your entire API into a fully-featured MCP server, making every endpoint available as a secure, typed tool for your AI model. This guide will walk you through converting a public REST API into an MCP server in just a few lines of code. Every code block in this tutorial is a complete, runnable example. You can copy and paste it into a file and run it, or paste it directly into a Python REPL like IPython to try it out. Make sure you have FastMCP installed. If not, follow the installation guide. For this tutorial, well use the JSONPlaceholder API, a free, fake online REST API for testing and prototyping. Its perfect because its simple and has a public OpenAPI specification. httpsjsonplaceholder.typicode.com Now for the magic. Well use FastMCP.from_openapi . This method takes an httpx.AsyncClient configured for your API and its OpenAPI specification, and automatically converts every endpoint into a callable MCP Tool . Learn more about working with OpenAPI specs in the OpenAPI integration docs. For this tutorial, well use a simplified OpenAPI spec directly in the code. In a real project, you would typically load the spec from a URL or local file. Create a file named api_server.py  And thats it! With just a few lines of code, youve created an MCP server that exposes the entire JSONPlaceholder API as a collection of tools. Lets verify that our new MCP server works. We can use the fastmcp.Client to connect to it and inspect its tools. Learn more about the FastMCP client in the client docs. Create a separate file, api_client.py  First, run your server Then, in another terminal, run the client You should see a list of generated tools get_users , get_user_by_id  and the result of calling the get_user_by_id tool, which fetches data from the live JSONPlaceholder API. By default, FastMCP converts every API endpoint into an MCP Tool . This ensures maximum compatibility with contemporary LLM clients, many of which only support the tools part of the MCP specification. However, for clients that support the full MCP spec, representing GET requests as Resources can be more semantically correct and efficient. FastMCP allows users to customize this behavior using the concept of route maps. A RouteMap is a mapping of an API route to an MCP type. FastMCP checks each API route against your custom maps in order. If a route matches a map, its converted to the specified mcp_type . Any route that doesnt match your custom maps will fall back to the default behavior becoming a Tool . Learn more about route maps in the OpenAPI integration docs. Heres how you can add custom route maps to turn GET requests into Resources and ResourceTemplates if they have path parameters With this configuration GET usersid becomes a ResourceTemplate .GET users becomes a Resource .POST , PUT , etc. endpoints would still become Tools by default.

Keywords: the, api, fastmcp, and, openapi, this, mcp, your, for, you

---

