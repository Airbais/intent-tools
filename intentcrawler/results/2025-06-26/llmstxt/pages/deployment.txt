# Deployment

## Integrating FastMCP in ASGI Applications - FastMCP

URL: https://gofastmcp.com/deployment/asgi

--- title Integrating FastMCP in ASGI Applications - FastMCP description Integrate FastMCP servers into existing Starlette, FastAPI, or other ASGI applications sitename FastMCP date 2024-05-29 --- Integrate FastMCP servers into existing Starlette, FastAPI, or other ASGI applications While FastMCP provides standalone server capabilities, you can also integrate your FastMCP server into existing web applications. This approach is useful for Please note that all FastMCP servers have a run method that can be used to start the server. This guide focuses on integration with broader ASGI frameworks. FastMCP servers can be created as Starlette ASGI apps for straightforward hosting or integration into existing applications. The first step is to obtain a Starlette application instance from your FastMCP server using the http_app method The http_app method is new in FastMCP 2.3.2. In older versions, use sse_app for SSE transport or streamable_http_app for Streamable HTTP transport. Both approaches return a Starlette application that can be integrated with other ASGI-compatible web frameworks. The returned app stores the FastMCP instance on app.state.fastmcp_server , so you can access it from custom middleware or routes via request.app.state.fastmcp_server . The MCP servers endpoint is mounted at the root path mcp for Streamable HTTP transport, and sse for SSE transport, though you can change these paths by passing a path argument to the http_app method To run the FastMCP server, you can use the uvicorn ASGI server Or, from the command line New in version 2.3.2 You can add custom Starlette middleware to your FastMCP ASGI apps by passing a list of middleware instances to the app creation methods New in version 2.3.1 You can mount your FastMCP server in another Starlette application The MCP endpoint will be available at mcp-servermcp of the resulting Starlette app. For Streamable HTTP transport, you must pass the lifespan context from the FastMCP app to the resulting Starlette app, as nested lifespans are not recognized. Otherwise, the FastMCP servers session manager will not be properly initialized. You can create complex routing structures by nesting mounts In this setup, the MCP server is accessible at the outerinnermcp path of the resulting Starlette app. For Streamable HTTP transport, you must pass the lifespan context from the FastMCP app to the outer Starlette app, as nested lifespans are not recognized. Otherwise, the FastMCP servers session manager will not be properly initialized. New in version 2.3.1 FastAPI is built on Starlette, so you can mount your FastMCP server in a similar way The MCP endpoint will be available at mcp-servermcp of the resulting FastAPI app. For Streamable HTTP transport, you must pass the lifespan context from the FastMCP app to the resulting FastAPI app, as nested lifespans are not recognized. Otherwise, the FastMCP servers session manager will not be properly initialized. In addition to adding your FastMCP server to an existing ASGI app, you can also add custom web routes to your FastMCP server, which will be exposed alongside the MCP endpoint. To do so, use the custom_route decorator. Note that this is less flexible than using a full ASGI framework, but can be useful for adding simple endpoints like health checks to your standalone server. These routes will be included in the FastMCP app when mounted in your web application.

Keywords: the, fastmcp, app, can, starlette, server, you, asgi, for, your

---

## Running Your FastMCP Server - FastMCP

URL: https://gofastmcp.com/deployment/running-server

--- title Running Your FastMCP Server - FastMCP description Learn how to run and deploy your FastMCP server using various transport protocols like STDIO, Streamable HTTP, and SSE. sitename FastMCP date 2024-05-29 --- Learn how to run and deploy your FastMCP server using various transport protocols like STDIO, Streamable HTTP, and SSE. FastMCP servers can be run in different ways depending on your applications needs, from local command-line tools to persistent web services. This guide covers the primary methods for running your server, focusing on the available transport protocols STDIO, Streamable HTTP, and SSE. run MethodFastMCP servers can be run directly from Python by calling the run method on a FastMCP instance. For maximum compatibility, its best practice to place the run call within an if __name__  __main__ block. This ensures the server starts only when the script is executed directly, not when imported as a module. You can now run this MCP server by executing python my_server.py . MCP servers can be run with a variety of different transport options, depending on your applications requirements. The run method can take a transport argument and other transport-specific keyword arguments to configure how the server operates. FastMCP also provides a command-line interface for running servers without modifying the source code. After installing FastMCP, you can run your server directly from the command line Important When using fastmcp run , it ignores the if __name__  __main__ block entirely. Instead, it looks for a FastMCP object named mcp , server , or app and calls its run method directly with the transport options you specify. This means you can use fastmcp run to override the transport specified in your code, which is particularly useful for testing or changing deployment methods without modifying the code. You can specify transport options and other configuration For development and testing, you can use the dev command to run your server with the MCP Inspector See the CLI documentation for detailed information about all available commands and options. When servers accept command line arguments using argparse, click, or other libraries, you can pass them after --  This is useful for servers that need configuration files, database paths, API keys, or other runtime options. Below is a comparison of available transport options to help you choose the right one for your needs The STDIO transport is the default and most widely compatible option for local MCP server execution. It is ideal for local tools, command-line integrations, and clients like Claude Desktop. However, it has the disadvantage of having to run the MCP code locally, which can introduce security concerns with third-party servers. STDIO is the default transport, so you dont need to specify it when calling run . However, you can specify it explicitly to make your intent clear When using Stdio transport, you will typically not run the server yourself as a separate process. Rather, your clients will spin up a new server process for each session. As such, no additional configuration is required. New in version 2.3.0 Streamable HTTP is a modern, efficient transport for exposing your MCP server via HTTP. It is the recommended transport for web-based deployments. To run a server using Streamable HTTP, you can use the run method with the transport argument set to http . This will start a Uvicorn server on the default host 127.0.0.1 , port 8000 , and path mcp . For backward compatibility, wherever http is accepted as a transport name, you can also pass streamable-http as a fully supported alias. This is particularly useful when upgrading from FastMCP 1.x in the official Python SDK and FastMCP  2.9, where streamable-http was the standard name. To customize the host, port, path, or log level, provide appropriate keyword arguments to the run method. The SSE transport is deprecated and may be removed in a future version. New applications should use Streamable HTTP transport instead. Server-Sent Events SSE is an HTTP-based protocol for server-to-client streaming. While FastMCP still supports SSE, it is deprecated and Streamable HTTP is preferred for new projects. To run a server using SSE, you can use the run method with the transport argument set to sse . This will start a Uvicorn server on the default host 127.0.0.1 , port 8000 , and with default SSE path sse  and message path messages . Notice that the client in the above example uses an explicit SSETransport to connect to the server. FastMCP will attempt to infer the appropriate transport from the provided configuration, but HTTP URLs are assumed to be Streamable HTTP as of FastMCP 2.3.0. To customize the host, port, or log level, provide appropriate keyword arguments to the run method. You can also adjust the SSE path which clients should connect to and the message POST endpoint which clients use to send subsequent messages. FastMCP provides both synchronous and asynchronous APIs for running your server. The run method seen in previous examples is a synchronous method that internally uses anyio.run to run the asynchronous server. For applications that are already running in an async context, FastMCP provides the run_async method. The run method cannot be called from inside an async function because it already creates its own async event loop internally. If you attempt to call run from inside an async function, youll get an error about the event loop already running. Always use run_async inside async functions and run in synchronous contexts. Both run and run_async accept the same transport arguments, so all the examples above apply to both methods. You can also add custom web routes to your FastMCP server, which will be exposed alongside the MCP endpoint. To do so, use the custom_route decorator. Note that this is less flexible than using a full ASGI framework, but can be useful for adding simple endpoints like health checks to your standalone server.

Keywords: the, run, server, and, transport, fastmcp, for, can, you, your

---

