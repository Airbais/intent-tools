# Clients

## Bearer Token Authentication - FastMCP

URL: https://gofastmcp.com/clients/auth/bearer

--- title Bearer Token Authentication - FastMCP description Authenticate your FastMCP client with a Bearer token. sitename FastMCP date 2024-05-29 --- Authenticate your FastMCP client with a Bearer token. New in version 2.6.0 Bearer Token authentication is only relevant for HTTP-based transports. You can configure your FastMCP client to use bearer authentication by supplying a valid access token. This is most appropriate for service accounts, long-lived API keys, CICD, applications where authentication is managed separately, or other non-interactive authentication methods. A Bearer token is a JSON Web Token JWT that is used to authenticate a request. It is most commonly used in the Authorization header of an HTTP request, using the Bearer scheme The most straightforward way to use a pre-existing Bearer token is to provide it as a string to the auth parameter of the fastmcp.Client or transport instance. FastMCP will automatically format it correctly for the Authorization header and bearer scheme. If youre using a string token, do not include the Bearer prefix. FastMCP will add it for you. You can also supply a Bearer token to a transport instance, such as StreamableHttpTransport or SSETransport  BearerAuth HelperIf you prefer to be more explicit and not rely on FastMCP to transform your string token, you can use the BearerAuth class yourself, which implements the httpx.Auth interface. If the MCP server expects a custom header or token scheme, you can manually set the clients headers instead of using the auth parameter by setting them on your transport

Keywords: token, the, bearer, fastmcp, you, authentication, your, client, for, can

---

## OAuth Authentication - FastMCP

URL: https://gofastmcp.com/clients/auth/oauth

--- title OAuth Authentication - FastMCP description Authenticate your FastMCP client via OAuth 2.1. sitename FastMCP date 2024-05-29 --- Authenticate your FastMCP client via OAuth 2.1. New in version 2.6.0 OAuth authentication is only relevant for HTTP-based transports and requires user interaction via a web browser. When your FastMCP client needs to access an MCP server protected by OAuth 2.1, and the process requires user interaction like logging in and granting consent, you should use the Authorization Code Flow. FastMCP provides the fastmcp.client.auth.OAuth helper to simplify this entire process. This flow is common for user-facing applications where the application acts on behalf of the user. The simplest way to use OAuth is to pass the string oauth to the auth parameter of the Client or transport instance. FastMCP will automatically configure the client to use OAuth with default settings OAuth HelperTo fully configure the OAuth flow, use the OAuth helper and pass it to the auth parameter of the Client or transport instance. OAuth manages the complexities of the OAuth 2.1 Authorization Code Grant with PKCE Proof Key for Code Exchange for enhanced security, and implements the full httpx.Auth interface. OAuth Parametersmcp_url str  The full URL of the target MCP server endpoint. Used to discover OAuth server metadatascopes str  liststr , optional OAuth scopes to request. Can be space-separated string or list of stringsclient_name str , optional Client name for dynamic registration. Defaults to FastMCP Client token_storage_cache_dir Path , optional Token cache directory. Defaults to .fastmcpoauth-mcp-client-cache additional_client_metadata dictstr, Any , optional Extra metadata for client registrationThe OAuth flow is triggered when you use a FastMCP Client configured to use OAuth. Token Check The client first checks the token_storage_cache_dir for existing, valid tokens for the target server. If one is found, it will be used to authenticate the client. OAuth Server Discovery If no valid tokens exist, the client attempts to discover the OAuth servers endpoints using a well-known URI e.g., .well-knownoauth-authorization-server  based on the mcp_url . Dynamic Client Registration If the OAuth server supports it and the client isnt already registered or credentials arent cached, the client performs dynamic client registration according to RFC 7591. Local Callback Server A temporary local HTTP server is started on an available port. This servers address e.g., http127.0.0.1portcallback  acts as the redirect_uri for the OAuth flow. Browser Interaction The users default web browser is automatically opened, directing them to the OAuth servers authorization endpoint. The user logs in and grants or denies the requested scopes . Authorization Code  Token Exchange Upon approval, the OAuth server redirects the users browser to the local callback server with an authorization_code . The client captures this code and exchanges it with the OAuth servers token endpoint for an access_token and often a refresh_token  using PKCE for security. Token Caching The obtained tokens are saved to the token_storage_cache_dir for future use, eliminating the need for repeated browser interactions. Authenticated Requests The access token is automatically included in the Authorization header for requests to the MCP server. Refresh Token If the access token expires, the client will automatically use the refresh token to get a new access token. OAuth access tokens are automatically cached in .fastmcpoauth-mcp-client-cache and persist between application runs. Files are keyed by the OAuth servers base URL. To clear the tokens for a specific server, instantiate a FileTokenStorage instance and call the clear method To clear all tokens for all servers, call the clear_all method on the FileTokenStorage class

Keywords: the, oauth, client, for, server, and, fastmcp, token, use, authorization

---

## The FastMCP Client - FastMCP

URL: https://gofastmcp.com/clients/client

--- title The FastMCP Client - FastMCP description Programmatic client for interacting with MCP servers through a well-typed, Pythonic interface. sitename FastMCP date 2024-05-29 --- New in version 2.0.0 The central piece of MCP client applications is the fastmcp.Client class. This class provides a programmatic interface for interacting with any Model Context Protocol MCP server, handling protocol details and connection management automatically. The FastMCP Client is designed for deterministic, controlled interactions rather than autonomous behavior, making it ideal for - Testing MCP servers during development - Building deterministic applications that need reliable MCP interactions - Creating the foundation for agentic or LLM-based clients with structured, type-safe operations All client operations require using the async with context manager for proper connection lifecycle management. This is not an agentic client - it requires explicit function calls and provides direct control over all MCP operations. Use it as a building block for higher-level systems. Creating a Client Creating a client is straightforward. You provide a server source and the client automatically infers the appropriate transport mechanism. import asyncio from fastmcp import Client, FastMCP  In-memory server ideal for testing server  FastMCPTestServer client  Clientserver  HTTP server client  Clienthttpsexample.commcp  Local Python script client  Clientmy_mcp_server.py async def main async with client  Basic server interaction await client.ping  List available operations tools  await client.list_tools resources  await client.list_resources prompts  await client.list_prompts  Execute operations result  await client.call_toolexample_tool, param value printresult asyncio.runmain Client-Transport Architecture The FastMCP Client separates concerns between protocol and connection Client  Handles MCP protocol operations tools, resources, prompts and manages callbacks Transport  Establishes and maintains the connection WebSockets, HTTP, Stdio, in-memory Transport Inference The client automatically infers the appropriate transport based on the input FastMCP instance  In-memory transport perfect for testing - File path ending in .py  Python Stdio transport - File path ending in .js  Node.js Stdio transport - URL starting with http or https  HTTP transport MCPConfig dictionary  Multi-server client from fastmcp import Client, FastMCP  Examples of transport inference client_memory  ClientFastMCPTestServer client_script  Client.server.py client_http  Clienthttpsapi.example.commcp For testing and development, always prefer the in-memory transport by passing a FastMCP server directly to the client. This eliminates network complexity and separate processes. Configuration-Based Clients New in version 2.4.0 Create clients from MCP configuration dictionaries, which can include multiple servers. While there is no official standard for MCP configuration format, FastMCP follows established conventions used by tools like Claude Desktop. config   mcpServers  server_name   Remote HTTPSSE server transport http,  or sse url httpsapi.example.commcp, headers Authorization Bearer token, auth oauth  or bearer token string , local_server   Local stdio server transport stdio command python, args .server.py, --verbose, env DEBUG true, cwd pathtoserver,    Multi-Server Example config   mcpServers  weather url httpsweather-api.example.commcp, assistant command python, args .assistant_server.py   client  Clientconfig async with client  Tools are prefixed with server names weather_data  await client.call_toolweather_get_forecast, city London response  await client.call_toolassistant_answer_question, question Whats the capital of France?  Resources use prefixed URIs icons  await client.read_resourceweatherweathericonssunny templates  await client.read_resourceresourceassistanttemplateslist Connection Lifecycle The client operates asynchronously and uses context managers for connection management async def example client  Clientmy_mcp_server.py  Connection established here async with client printfConnected client.is_connected  Make multiple calls within the same session tools  await client.list_tools result  await client.call_toolgreet, name World  Connection closed automatically here printfConnected client.is_connected Operations FastMCP clients can interact with several types of server components Tools are server-side functions that the client can execute with arguments. async with client  List available tools tools  await client.list_tools  Execute a tool result  await client.call_toolmultiply, a 5, b 3 printresult0.text  15 See Tools for detailed documentation. Resources Resources are data sources that the client can read, either static or templated. async with client  List available resources resources  await client.list_resources  Read a resource content  await client.read_resourcefileconfigsettings.json printcontent0.text See Resources for detailed documentation. Prompts Prompts are reusable message templates that can accept arguments. async with client  List available prompts prompts  await client.list_prompts  Get a rendered prompt messages  await client.get_promptanalyze_data, data 1, 2, 3 printmessages.messages See Prompts for detailed documentation. Server Connectivity Use ping to verify the server is reachable async with client await client.ping printServer is reachable Client Configuration Clients can be configured with additional handlers and settings for specialized use cases. Callback Handlers The client supports several callback handlers for advanced server interactions from fastmcp import Client from fastmcp.client.logging import LogMessage async def log_handlermessage LogMessage printfServer log message.data async def progress_handlerprogress float, total float  None, message str  None printfProgress progresstotal - message async def sampling_handlermessages, params, context  Integrate with your LLM service here return Generated response client  Client my_mcp_server.py, log_handlerlog_handler, progress_handlerprogress_handler, sampling_handlersampling_handler, timeout30.0  The Client constructor accepts several configuration options transport  Transport instance or source for automatic inference log_handler  Handle server log messages progress_handler  Monitor long-running operations sampling_handler  Respond to server LLM requests roots  Provide local context to servers timeout  Default timeout for requests in seconds Transport Configuration For detailed transport configuration headers, authentication, environment variables, see the Transports documentation. Next Steps Explore the detailed documentation for each operation type Core Operations - Tools - Execute server-side functions and handle results - Resources - Access static and templated resources - Prompts - Work with message templates and argument serialization Advanced Features - Logging - Handle server log messages - Progress - Monitor long-running operations - Sampling - Respond to server LLM requests - Roots - Provide local context to servers Connection Details The FastMCP Client is designed as a foundational tool. Use it directly for deterministic operations, or build higher-level agentic systems on top of its reliable, type-safe interface. Responses are generated using AI and may contain mistakes.

Keywords: client, the, server, for, with, await, fastmcp, transport, and, async

---

## Server Logging - FastMCP

URL: https://gofastmcp.com/clients/logging

--- title Server Logging - FastMCP description Receive and handle log messages from MCP servers. sitename FastMCP date 2024-05-29 --- If you dont provide a custom log_handler, FastMCP uses a default handler that emits a DEBUG-level FastMCP log for every log message received from the server, which is useful for visibility without polluting your own logs. Copy Ask AI client  Clientmy_mcp_server.pyasync with client  Server logs will be emitted at DEBUG level automatically await client.call_toolsome_tool Assistant Responses are generated using AI and may contain mistakes.

Keywords: fastmcp, server, log, client, and, from, debug, level, for, logs

---

## Message Handling - FastMCP

URL: https://gofastmcp.com/clients/messages

--- title Message Handling - FastMCP description Handle MCP messages, requests, and notifications with custom message handlers. sitename FastMCP date 2024-05-29 --- Handle MCP messages, requests, and notifications with custom message handlers. New in version2.9.1 MCP clients can receive various types of messages from servers, including requests that need responses and notifications that dont. The message handler provides a unified way to process all these messages. The simplest way to handle messages is with a function that receives all messages Copy Ask AI from fastmcp import Clientasync def message_handlermessage Handle all MCP messages from the server. if hasattrmessage, root method  message.root.method printfReceived method  Handle specific notifications if method  notificationstoolslist_changed printTools have changed - might want to refresh tool cache elif method  notificationsresourceslist_changed printResources have changedclient  Client my_mcp_server.py, message_handlermessage_handler,

Keywords: messages, message, handle, method, mcp, notifications, fastmcp, requests, and, with

---

## Progress Monitoring - FastMCP

URL: https://gofastmcp.com/clients/progress

--- title Progress Monitoring - FastMCP description Handle progress notifications from long-running server operations. sitename FastMCP date 2024-05-29 --- Override the progress handler for specific tool calls Copy Ask AI async with client  Override with specific progress handler for this call result  await client.call_tool long_running_task, param value, progress_handlermy_progress_handler  Assistant Responses are generated using AI and may contain mistakes.

Keywords: progress, fastmcp, override, handler, for, specific, with, client, title, monitoring

---

## Prompts - FastMCP

URL: https://gofastmcp.com/clients/prompts

--- title Prompts - FastMCP description Use server-side prompt templates with automatic argument serialization. sitename FastMCP date 2024-05-29 --- New in version 2.0.0 Prompts are reusable message templates exposed by MCP servers. They can accept arguments to generate personalized message sequences for LLM interactions. Listing Prompts Use list_prompts to retrieve all available prompt templates async with client prompts  await client.list_prompts  prompts - listmcp.types.Prompt for prompt in prompts printfPrompt prompt.name printfDescription prompt.description if prompt.arguments printfArguments arg.name for arg in prompt.arguments Using Prompts Basic Usage Request a rendered prompt using get_prompt with the prompt name and arguments async with client  Simple prompt without arguments result  await client.get_promptwelcome_message  result - mcp.types.GetPromptResult  Access the generated messages for message in result.messages printfRole message.role printfContent message.content Prompts with Arguments Pass arguments as a dictionary to customize the prompt async with client  Prompt with simple arguments result  await client.get_promptuser_greeting,  name Alice, role administrator   Access the personalized messages for message in result.messages printfGenerated message message.content Automatic Argument Serialization New in version 2.9.0 FastMCP automatically serializes complex arguments to JSON strings as required by the MCP specification. This allows you to pass typed objects directly from dataclasses import dataclass dataclass class UserData name str age int async with client  Complex arguments are automatically serialized result  await client.get_promptanalyze_user,  user UserDatanameAlice, age30,  Automatically serialized to JSON preferences theme dark,  Dict serialized to JSON string scores 85, 92, 78,  List serialized to JSON string simple_name Bob  Strings passed through unchanged  The client handles serialization using pydantic_core.to_json for consistent formatting. FastMCP servers can automatically deserialize these JSON strings back to the expected types. Serialization Examples async with client result  await client.get_promptdata_analysis,   These will be automatically serialized to JSON strings config  format csv, include_headers True, delimiter , , filters  field age, operator , value 18, field status, operator , value active ,  This remains a string report_title Monthly Analytics Report  Working with Prompt Results The get_prompt method returns a GetPromptResult object containing a list of messages async with client result  await client.get_promptconversation_starter, topic climate  Access individual messages for i, message in enumerateresult.messages printfMessage i  1 printf Role message.role printf Content message.content.text if hasattrmessage.content, text else message.content Raw MCP Protocol Access For access to the complete MCP protocol objects, use the _mcp methods async with client  Raw MCP method returns full protocol object prompts_result  await client.list_prompts_mcp  prompts_result - mcp.types.ListPromptsResult prompt_result  await client.get_prompt_mcpexample_prompt, arg value  prompt_result - mcp.types.GetPromptResult Multi-Server Clients When using multi-server clients, prompts are accessible without prefixing unlike tools async with client  Multi-server client  Prompts from any server are directly accessible result1  await client.get_promptweather_prompt, city London result2  await client.get_promptassistant_prompt, query help Common Prompt Patterns System Messages Many prompts generate system messages for LLM configuration async with client result  await client.get_promptsystem_configuration,  role helpful assistant, expertise python programming   Typically returns messages with rolesystem system_message  result.messages0 printfSystem prompt system_message.content Conversation Templates Prompts can generate multi-turn conversation templates async with client result  await client.get_promptinterview_template,  candidate_name Alice, position Senior Developer   Multiple messages for a conversation flow for message in result.messages printfmessage.role message.content Prompt arguments and their expected types depend on the specific prompt implementation. Check the servers documentation or use list_prompts to see available arguments for each prompt. Responses are generated using AI and may contain mistakes.

Keywords: client, prompt, with, message, prompts, arguments, for, await, the, result

---

## Resource Operations - FastMCP

URL: https://gofastmcp.com/clients/resources

--- title Resource Operations - FastMCP description Access static and templated resources from MCP servers. sitename FastMCP date 2024-05-29 --- New in version 2.0.0 Resources are data sources exposed by MCP servers. They can be static files or dynamic templates that generate content based on parameters. Types of Resources MCP servers expose two types of resources - Static Resources Fixed content accessible via URI e.g., configuration files, documentation - Resource Templates Dynamic resources that accept parameters to generate content e.g., API endpoints, database queries Listing Resources Static Resources Use list_resources to retrieve all static resources available on the server async with client resources  await client.list_resources  resources - listmcp.types.Resource for resource in resources printfResource URI resource.uri printfName resource.name printfDescription resource.description printfMIME Type resource.mimeType Resource Templates Use list_resource_templates to retrieve available resource templates async with client templates  await client.list_resource_templates  templates - listmcp.types.ResourceTemplate for template in templates printfTemplate URI template.uriTemplate printfName template.name printfDescription template.description Reading Resources Static Resources Read a static resource using its URI async with client  Read a static resource content  await client.read_resourcefilepathtoREADME.md  content - listmcp.types.TextResourceContents  mcp.types.BlobResourceContents  Access text content if hasattrcontent0, text printcontent0.text  Access binary content if hasattrcontent0, blob printfBinary data lencontent0.blob bytes Resource Templates Read from a resource template by providing the URI with parameters async with client  Read a resource generated from a template  For example, a template like weathercitycurrent weather_content  await client.read_resourceweatherlondoncurrent  Access the generated content printweather_content0.text  Assuming text JSON response Content Types Resources can return different content types Text Resources async with client content  await client.read_resourceresourceconfigsettings.json for item in content if hasattritem, text printfText content item.text printfMIME type item.mimeType Binary Resources async with client content  await client.read_resourceresourceimageslogo.png for item in content if hasattritem, blob printfBinary content lenitem.blob bytes printfMIME type item.mimeType  Save to file with opendownloaded_logo.png, wb as f f.writeitem.blob Working with Multi-Server Clients When using multi-server clients, resource URIs are automatically prefixed with the server name async with client  Multi-server client  Access resources from different servers weather_icons  await client.read_resourceweatherweathericonssunny templates  await client.read_resourceresourceassistanttemplateslist printfWeather icon weather_icons0.blob printfTemplates templates0.text Raw MCP Protocol Access For access to the complete MCP protocol objects, use the _mcp methods async with client  Raw MCP methods return full protocol objects resources_result  await client.list_resources_mcp  resources_result - mcp.types.ListResourcesResult templates_result  await client.list_resource_templates_mcp  templates_result - mcp.types.ListResourceTemplatesResult content_result  await client.read_resource_mcpresourceexample  content_result - mcp.types.ReadResourceResult Common Resource URI Patterns Different MCP servers may use various URI schemes  File system resources filepathtofile.txt  Custom protocol resources weatherlondoncurrent databaseusers123  Generic resource protocol resourceconfigsettings resourcetemplatesemail Resource URIs and their formats depend on the specific MCP server implementation. Check the servers documentation for available resources and their URI patterns. Responses are generated using AI and may contain mistakes.

Keywords: resources, client, resource, content, mcp, with, types, await, templates, uri

---

## Client Roots - FastMCP

URL: https://gofastmcp.com/clients/roots

--- title Client Roots - FastMCP description Provide local context and resource boundaries to MCP servers. sitename FastMCP date 2024-05-29 --- Provide local context and resource boundaries to MCP servers. New in version 2.0.0 Roots are a way for clients to inform servers about the resources they have access to. Servers can use this information to adjust behavior or provide more relevant responses. Provide a list of roots when creating the client

Keywords: provide, servers, roots, client, fastmcp, local, context, and, resource, boundaries

---

## LLM Sampling - FastMCP

URL: https://gofastmcp.com/clients/sampling

--- title LLM Sampling - FastMCP description Handle server-initiated LLM sampling requests. sitename FastMCP date 2024-05-29 --- Handle server-initiated LLM sampling requests. New in version 2.0.0 MCP servers can request LLM completions from clients. The client handles these requests through a sampling handler callback. Provide a sampling_handler function when creating the client from fastmcp import Client from fastmcp.client.sampling import  SamplingMessage, SamplingParams, RequestContext,  async def sampling_handler messages listSamplingMessage, params SamplingParams, context RequestContext  - str  Your LLM integration logic here  Extract text from messages and generate a response return Generated response based on the messages client  Client my_mcp_server.py, sampling_handlersampling_handler,  The sampling handler receives three parameters The messages to sample from The servers preferences for which model to select. The client MAY ignore these preferences. An optional system prompt the server wants to use for sampling. A request to include context from one or more MCP servers including the caller, to be attached to the prompt. The sampling temperature. The maximum number of tokens to sample. The stop sequences to use for sampling. Optional metadata to pass through to the LLM provider. from fastmcp import Client from fastmcp.client.sampling import SamplingMessage, SamplingParams, RequestContext async def basic_sampling_handler messages listSamplingMessage, params SamplingParams, context RequestContext  - str  Extract message content conversation   for message in messages content  message.content.text if hasattrmessage.content, text else strmessage.content conversation.appendfmessage.role content  Use the system prompt if provided system_prompt  params.systemPrompt or You are a helpful assistant.  Here you would integrate with your preferred LLM service  This is just a placeholder response return fResponse based on conversation   .joinconversation client  Client my_mcp_server.py, sampling_handlerbasic_sampling_handler

Keywords: the, client, sampling, from, llm, fastmcp, messages, content, import, samplingparams

---

## Tool Operations - FastMCP

URL: https://gofastmcp.com/clients/tools

--- title Tool Operations - FastMCP description Discover and execute server-side tools with the FastMCP client. sitename FastMCP date 2024-05-29 --- New in version 2.0.0 Tools are executable functions exposed by MCP servers. The FastMCP client provides methods to discover available tools and execute them with arguments. Use list_tools to retrieve all tools available on the server async with client tools  await client.list_tools  tools - listmcp.types.Tool for tool in tools printfTool tool.name printfDescription tool.description if tool.inputSchema printfParameters tool.inputSchema Basic Execution Execute a tool using call_tool with the tool name and arguments async with client  Simple tool call result  await client.call_tooladd, a 5, b 3  result - listmcp.types.TextContent  mcp.types.ImageContent  ...  Access the result content printresult0.text  Assuming TextContent, e.g., 8 Advanced Execution Options The call_tool method supports additional parameters for timeout control and progress monitoring async with client  With timeout aborts if execution takes longer than 2 seconds result  await client.call_tool long_running_task, param value, timeout2.0   With progress handler to track execution progress result  await client.call_tool long_running_task, param value, progress_handlermy_progress_handler  Parameters name  The tool name string arguments  Dictionary of arguments to pass to the tool optional timeout  Maximum execution time in seconds optional, overrides client-level timeout progress_handler  Progress callback function optional, overrides client-level handler Handling Results Tool execution returns a list of content objects. The most common types are TextContent  Text-based results with a .text attribute ImageContent  Image data with image-specific attributes BlobContent  Binary data content async with client result  await client.call_toolget_weather, city London for content in result if hasattrcontent, text printfText result content.text elif hasattrcontent, data printfBinary data lencontent.data bytes Error Handling Exception-Based Error Handling By default, call_tool raises a ToolError if the tool execution fails from fastmcp.exceptions import ToolError async with client try result  await client.call_toolpotentially_failing_tool, param value printTool succeeded, result except ToolError as e printfTool failed e Manual Error Checking For more granular control, use call_tool_mcp which returns the raw MCP protocol object with an isError flag async with client result  await client.call_tool_mcppotentially_failing_tool, param value  result - mcp.types.CallToolResult if result.isError printfTool failed result.content else printfTool succeeded result.content Argument Handling Arguments are passed as a dictionary to the tool async with client  Simple arguments result  await client.call_toolgreet, name World  Complex arguments result  await client.call_toolprocess_data,  config format json, validate True, items 1, 2, 3, 4, 5, metadata source api, version 1.0  For multi-server clients, tool names are automatically prefixed with the server name e.g., weather_get_forecast for a tool named get_forecast on the weather server. Responses are generated using AI and may contain mistakes.

Keywords: client, tool, result, with, the, await, tools, arguments, async, execution

---

## Client Transports - FastMCP

URL: https://gofastmcp.com/clients/transports

--- title Client Transports - FastMCP description Understand the different ways FastMCP Clients can connect to servers. sitename FastMCP date 2024-05-29 --- Understand the different ways FastMCP Clients can connect to servers. New in version2.0.0 The FastMCP Client relies on a ClientTransport object to handle the specifics of connecting to and communicating with an MCP server. FastMCP provides several built-in transport implementations for common connection methods. While the Client often infers the correct transport automatically see Client Overview, you can also instantiate transports explicitly for more control. Clients are lightweight objects, so dont hesitate to create new ones as needed. However, be mindful of the context management - each time you open a client context async with client, a new connection or process starts. For best performance, keep client contexts open while performing multiple operations rather than repeatedly opening and closing them. Choose the transport that best fits your use case Connecting to RemotePersistent Servers Use StreamableHttpTransport recommended, default for HTTP URLs or SSETransport legacy option for web-based deployments. Local DevelopmentTesting Use FastMCPTransport for in-memory, same-process testing of your FastMCP servers. Running Local Servers Use UvxStdioTransport Pythonuv or NpxStdioTransport Nodenpm if you need to run MCP servers as packaged tools. Server-Sent Events SSE is a transport that allows servers to push data to clients over HTTP connections. While still supported, Streamable HTTP is now the recommended transport for new web-based deployments. These transports manage an MCP server running as a subprocess, communicating with it via standard input stdin and standard output stdout. This is the standard mechanism used by clients like Claude Desktop. All stdio transports support a keep_alive parameter default True that controls session persistence across multiple client context managers keep_aliveTrue default The subprocess and session are maintained between client context exits and re-entries. This improves performance when making multiple separate connections to the same server. keep_aliveFalse A new subprocess is started for each client context, ensuring complete isolation between sessions. When keep_aliveTrue, you can manually close the session using await client.close if needed. This will terminate the subprocess and require a new one to be started on the next connection. Copy Ask AI from fastmcp import Client Client with keep_aliveTrue defaultclient  Clientmy_mcp_server.pyasync def example  First session async with client await client.ping  Second session - uses the same subprocess async with client await client.ping  Manually close the session await client.close  Third session - will start a new subprocess async with client await client.pingasyncio.runexample Use Case Running a Python-based MCP server script in a subprocess This is the most common way to interact with local FastMCP servers during development or when integrating with tools that expect to launch a server script. Copy Ask AI from fastmcp import Clientfrom fastmcp.client.transports import PythonStdioTransportserver_script  my_mcp_server.py  Path to your server script Option 1 Inferred transportclient  Clientserver_script Option 2 Explicit transport with custom configurationtransport  PythonStdioTransport script_pathserver_script, python_cmdusrbinpython3.11,  Optional specify Python interpreter  args--some-server-arg,  Optional pass arguments to the script  envMY_VAR value,  Optional set environment variablesclient  Clienttransportasync def main async with client tools  await client.list_tools printfConnected via Python Stdio, found tools toolsasyncio.runmain The server script must include logic to start the MCP server and listen on stdio, typically via mcp.run or fastmcp.server.run. The Client only launches the script it doesnt inject the server logic. Use Case Running an MCP server packaged as an NPM package using npx Similar to UvxStdioTransport, but for the Node.js ecosystem. Copy Ask AI from fastmcp import Clientfrom fastmcp.client.transports import NpxStdioTransport Run an MCP server from an NPM packagetransport  NpxStdioTransport packagemcp-server-package,  args--port, stdio  Optional pass arguments to the packageclient  Clienttransportasync def main async with client result  await client.call_toolget_npm_data,  printfResult resultasyncio.runmain Inferred From An instance of fastmcp.server.FastMCP or a FastMCP 1.0 server mcp.server.fastmcp.FastMCP Use Case Connecting directly to a FastMCP server instance in the same Python process This is extremely useful for testing your FastMCP servers. Copy Ask AI from fastmcp import FastMCP, Clientimport asyncio 1. Create your FastMCP server instanceserver  FastMCPnameInMemoryServerserver.tooldef ping return pong 2. Create a client pointing directly to the server instanceclient  Clientserver  Transport is automatically inferredasync def main async with client result  await client.call_toolping printfIn-memory call result resultasyncio.runmain Communication happens through efficient in-memory queues, making it very fast and ideal for unit testing. Inferred From An instance of MCPConfig or a dictionary matching the MCPConfig schema Use Case Connecting to one or more MCP servers defined in a configuration object MCPConfig follows an emerging standard for MCP server configuration but is subject to change as the specification evolves. The standard supports both local servers running via stdio and remote servers accessed via HTTP. Copy Ask AI from fastmcp import Client Configuration for multiple MCP servers both local and remoteconfig   mcpServers   Remote HTTP server weather  url httpsweather-api.example.commcp, transport http ,  Local stdio server assistant  command python, args .assistant_server.py, env DEBUG true ,  Another remote server calendar  url httpscalendar-api.example.commcp, transport http   Create a transport from the config happens automatically with Clientclient  Clientconfigasync def main async with client  Tools are accessible with server name prefixes weather  await client.call_toolweather_get_forecast, city London answer  await client.call_toolassistant_answer_question, query What is MCP? events  await client.call_toolcalendar_list_events, date 2023-06-01  Resources use prefixed URI paths icons  await client.read_resourceweatherweathericonssunny docs  await client.read_resourceresourceassistantdocsmcpasyncio.runmain If your configuration has only a single server, the client will connect directly to that server without any prefixing. This makes it convenient to switch between single and multi-server configurations without changing your client code. The MCPConfig format is an emerging standard for MCP server configuration and may change as the MCP ecosystem evolves. While FastMCP aims to maintain compatibility with future versions, be aware that field names or structure might change. Assistant Responses are generated using AI and may contain mistakes.

Keywords: client, the, server, fastmcp, with, mcp, for, servers, and, await

---

