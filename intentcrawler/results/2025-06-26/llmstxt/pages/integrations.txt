# Integrations

## Anthropic API + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/anthropic

--- title Anthropic API  FastMCP - FastMCP description Call FastMCP servers from the Anthropic API sitename FastMCP date 2024-05-29 --- Call FastMCP servers from the Anthropic API Anthropics Messages API supports MCP servers as remote tool sources. This tutorial will show you how to create a FastMCP server and deploy it to a public URL, then how to call it from the Messages API. Currently, the MCP connector only accesses tools from MCP serversit queries the list_tools endpoint and exposes those functions to Claude. Other MCP features like resources and prompts are not currently supported. You can read more about the MCP connector in the Anthropic documentation. First, create a FastMCP server with the tools you want to expose. For this example, well create a server with a single tool that rolls dice. Your server must be deployed to a public URL in order for Anthropic to access it. The MCP connector supports both SSE and Streamable HTTP transports. For development, you can use tools like ngrok to temporarily expose a locally-running server to the internet. Well do that for this example you may need to install ngrok and create a free account, but you can use any other method to deploy your server. Assuming you saved the above code as server.py , you can run the following two commands in two separate terminals to deploy your server and expose it to the internet This exposes your unauthenticated server to the internet. Only run this command in a safe environment if you understand the risks. To use the Messages API with MCP servers, youll need to install the Anthropic Python SDK not included with FastMCP Youll also need to authenticate with Anthropic. You can do this by setting the ANTHROPIC_API_KEY environment variable. Consult the Anthropic SDK documentation for more information. Here is an example of how to call your server from Python. Note that youll need to replace httpsyour-server-url.com with the actual URL of your server. In addition, we use mcp as the endpoint because we deployed a streamable-HTTP server with the default path you may need to use a different endpoint if you customized your servers deployment. At this time you must also include the extra_headers parameter with the anthropic-beta header. If you run this code, youll see something like the following output New in version 2.6.0 The MCP connector supports OAuth authentication through authorization tokens, which means you can secure your server while still allowing Anthropic to access it. The simplest way to add authentication to the server is to use a bearer token scheme. For this example, well quickly generate our own tokens with FastMCPs RSAKeyPair utility, but this may not be appropriate for production use. For more details, see the complete server-side Bearer Auth documentation. Well start by creating an RSA key pair to sign and verify tokens. FastMCPs RSAKeyPair utility is for development and testing only. Next, well create a BearerAuthProvider to authenticate the server. Here is a complete example that you can copypaste. For simplicity and the purposes of this example only, it will print the token to the console. Do NOT do this in production! If you try to call the authenticated server with the same Anthropic code we wrote earlier, youll get an error indicating that the server rejected the request because its not authenticated. To authenticate the client, you can pass the token using the authorization_token parameter in your MCP server configuration You should now see the dice roll results in the output.

Keywords: the, server, you, this, anthropic, mcp, with, for, and, your

---

## ChatGPT + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/chatgpt

--- title ChatGPT  FastMCP - FastMCP description Connect FastMCP servers to ChatGPT Deep Research sitename FastMCP date 2024-05-29 --- Connect FastMCP servers to ChatGPT Deep Research ChatGPT supports MCP servers through remote HTTP connections, allowing you to extend ChatGPTs capabilities with custom tools and knowledge from your FastMCP servers. MCP integration with ChatGPT is currently limited to Deep Research functionality and is not available for general chat. This feature is available for ChatGPT Pro, Team, Enterprise, and Edu users. OpenAIs official MCP documentation and examples are built with FastMCP v2! Check out their sample MCP server which demonstrates FastMCP in action. ChatGPTs Deep Research feature requires MCP servers to be internet-accessible HTTP endpoints with exactly two specific tools search  For searching through your resources and returning matching IDsfetch  For retrieving the full content of specific resources by IDIf your server doesnt implement both search and fetch tools with the correct signatures, ChatGPT will show the error This MCP server doesnt implement our specification. Both tools are required. Since ChatGPT needs to understand how to use your tools effectively, write detailed tool descriptions. The description teaches ChatGPT how to form queries, what parameters to use, and what to expect from your data. Poor descriptions lead to poor search results. A Deep Research-compatible server must implement these two required tools searchquery str - Takes a query of any kind and returns matching record IDsfetchid str - Takes an ID and returns the recordCritical Write detailed docstrings for both tools. These descriptions teach ChatGPT how to use your tools effectively. Poor descriptions lead to poor search results. The search tool should take a query of any kind! and return IDs. The fetch tool should take an ID and return the record. Heres a reference server implementation you can adapt see also OpenAIs sample server for comparison Your server must be deployed to a public URL in order for ChatGPT to access it. For development, you can use tools like ngrok to temporarily expose a locally-running server to the internet. Well do that for this example you may need to install ngrok and create a free account, but you can use any other method to deploy your server. Assuming you saved the above code as server.py , you can run the following two commands in two separate terminals to deploy your server and expose it to the internet This exposes your unauthenticated server to the internet. Only run this command in a safe environment if you understand the risks. Replace httpsyour-server-url.com with the actual URL of your server such as your ngrok URL. httpsabc123.ngrok.io ChatGPT will use your servers search and fetch tools to find relevant information and cite the sources in its response. If you get this error, it most likely means that your server doesnt implement the required tools search and fetch . To correct it, ensure that your server meets the service requirements.

Keywords: the, and, server, your, chatgpt, tools, you, for, fastmcp, search

---

## Claude Code + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/claude-code

--- title Claude Code  FastMCP - FastMCP description Connect FastMCP servers to Claude Code sitename FastMCP date 2024-05-29 --- Connect FastMCP servers to Claude Code Claude Code supports MCP servers through multiple transport methods, allowing you to extend Claudes capabilities with custom tools, resources, and prompts from your FastMCP servers. Claude Code supports both local and remote MCP servers with flexible configuration options. See the Claude Code MCP documentation for other transport methods. Claude Code provides built-in MCP management commands to easily add, configure, and authenticate your FastMCP servers. You can create FastMCP servers using STDIO transport, remote HTTP servers, or local HTTP servers. This example shows one common approach running an HTTP server locally for development. Start your server and add it to Claude Code Then add it to Claude Code Once connected, Claude Code will automatically discover and use your servers tools when relevant Claude will call your roll_dice tool and provide the results. If your server provides resources, you can reference them with  mentions like dicefilepathtoresource .

Keywords: claude, code, servers, fastmcp, and, your, mcp, transport, you, with

---

## Claude Desktop + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/claude-desktop

--- title Claude Desktop  FastMCP - FastMCP description Call FastMCP servers from Claude Desktop sitename FastMCP date 2024-05-29 --- Call FastMCP servers from Claude Desktop Claude Desktop supports MCP servers through local STDIO connections and remote servers beta, allowing you to extend Claudes capabilities with custom tools, resources, and prompts from your FastMCP servers. Remote MCP server support is currently in beta and available for users on Claude Pro, Max, Team, and Enterprise plans as of June 2025. Most users will still need to use local STDIO connections. This guide focuses specifically on using FastMCP servers with Claude Desktop. For general Claude Desktop MCP setup and official examples, see the official Claude Desktop quickstart guide. Claude Desktop traditionally requires MCP servers to run locally using STDIO transport, where your server communicates with Claude through standard inputoutput rather than HTTP. However, users on certain plans now have access to remote server support as well. If you dont have access to remote server support or need to connect to remote servers, you can create a proxy server that runs locally via STDIO and forwards requests to remote HTTP servers. See the Proxy Servers section below. The examples in this guide will use the following simple dice-rolling server, saved as server.py . The easiest way to install a FastMCP server in Claude Desktop is using the fastmcp install command. This automatically handles the configuration and dependency management. The install command supports the same file.pyobject notation as the run command. If no object is specified, it will automatically look for a FastMCP server object named mcp , server , or app in your file After installation, restart Claude Desktop completely. You should see a hammer icon  in the bottom left of the input box, indicating that MCP tools are available. If your server has dependencies, include them with the --with flag Alternatively, you can specify dependencies directly in your server code Claude Desktop runs servers in a completely isolated environment with no access to your shell environment or locally installed applications. You must explicitly pass any environment variables your server needs. If your server needs environment variables like API keys, you must include them Or load them from a .env file uv must be installed and available in your system PATH. Claude Desktop runs in its own isolated environment and needs uv to manage dependencies.uv globally with Homebrew so that Claude Desktop will detect it brew install uv . Installing uv with other methods may not make it accessible to Claude Desktop.For more control over the configuration, you can manually edit Claude Desktops configuration file. You can open the configuration file from Claudes developer settings, or find it in the following locations LibraryApplication SupportClaudeclaude_desktop_config.json APPDATAClaudeclaude_desktop_config.json The configuration file is a JSON object with a mcpServers key, which contains the configuration for each MCP server. After updating the configuration file, restart Claude Desktop completely. Look for the hammer icon  to confirm your server is loaded. If your server has dependencies, you can use uv or another package manager to set up the environment. uv must be installed and available in your system PATH. Claude Desktop runs in its own isolated environment and needs uv to manage dependencies.uv globally with Homebrew so that Claude Desktop will detect it brew install uv . Installing uv with other methods may not make it accessible to Claude Desktop.You can also specify environment variables in the configuration Claude Desktop runs servers in a completely isolated environment with no access to your shell environment or locally installed applications. You must explicitly pass any environment variables your server needs. Users on Claude Pro, Max, Team, and Enterprise plans have first-class remote server support via integrations. For other users, or as an alternative approach, FastMCP can create a proxy server that forwards requests to a remote HTTP server. You can install the proxy server in Claude Desktop. Create a proxy server that connects to a remote HTTP server For authenticated remote servers, create an authenticated client following the guidance in the client auth documentation and pass it to the proxy

Keywords: the, claude, server, desktop, your, servers, and, you, with, fastmcp

---

## Contrib Modules - FastMCP

URL: https://gofastmcp.com/integrations/contrib

--- title Contrib Modules - FastMCP description Community-contributed modules extending FastMCP sitename FastMCP date 2024-05-29 --- Community-contributed modules extending FastMCP New in version 2.2.1 FastMCP includes a contrib package that holds community-contributed modules. These modules extend FastMCPs functionality but arent officially maintained by the core team. Contrib modules provide additional features, integrations, or patterns that complement the core FastMCP library. They offer a way for the community to share useful extensions while keeping the core library focused and maintainable. The available modules can be viewed in the contrib directory. To use a contrib module, import it from the fastmcp.contrib package contrib may have different testing requirements or stability guarantees compared to the core library.contrib without explicit warnings in the main changelog.We welcome contributions to the contrib package! If you have a module that extends FastMCP in a useful way, consider contributing it srcfastmcpcontrib for your moduletestscontrib The ideal contrib module

Keywords: the, contrib, fastmcp, modules, community, core, contributed, package, that, library

---

## Gemini SDK + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/gemini

--- title Gemini SDK  FastMCP - FastMCP description Call FastMCP servers from the Google Gemini SDK sitename FastMCP date 2024-05-29 --- Call FastMCP servers from the Google Gemini SDK Googles Gemini API includes built-in support for MCP servers in their Python and JavaScript SDKs, allowing you to connect directly to MCP servers and use their tools seamlessly with Gemini models. Googles Gemini Python SDK can use FastMCP clients directly. Googles MCP integration is currently experimental and available in the Python and JavaScript SDKs. The API automatically calls MCP tools when needed and can connect to both local and remote MCP servers. Currently, Geminis MCP support only accesses tools from MCP serversit queries the list_tools endpoint and exposes those functions to the AI. Other MCP features like resources and prompts are not currently supported. First, create a FastMCP server with the tools you want to expose. For this example, well create a server with a single tool that rolls dice. To use the Gemini API with MCP, youll need to install the Google Generative AI SDK Youll also need to authenticate with Google. You can do this by setting the GEMINI_API_KEY environment variable. Consult the Gemini SDK documentation for more information. Geminis SDK interacts directly with the MCP client session. To call the server, youll need to instantiate a FastMCP client, enter its connection context, and pass the client session to the Gemini SDK. If you run this code, youll see output like In the above example, we connected to our local server using stdio transport. Because were using a FastMCP client, you can also connect to any local or remote MCP server, using any transport or auth method supported by FastMCP, simply by changing the client configuration. For example, to connect to a remote, authenticated server, you can use the following client The rest of the code remains the same.

Keywords: the, mcp, fastmcp, gemini, and, sdk, you, with, server, client

---

## OpenAI API + FastMCP - FastMCP

URL: https://gofastmcp.com/integrations/openai

--- title OpenAI API  FastMCP - FastMCP description Call FastMCP servers from the OpenAI API sitename FastMCP date 2024-05-29 --- Call FastMCP servers from the OpenAI API OpenAIs Responses API supports MCP servers as remote tool sources, allowing you to extend AI capabilities with custom functions. The Responses API is a distinct API from OpenAIs Completions API or Assistants API. At this time, only the Responses API supports MCP. Currently, the Responses API only accesses tools from MCP serversit queries the list_tools endpoint and exposes those functions to the AI agent. Other MCP features like resources and prompts are not currently supported. First, create a FastMCP server with the tools you want to expose. For this example, well create a server with a single tool that rolls dice. Your server must be deployed to a public URL in order for OpenAI to access it. For development, you can use tools like ngrok to temporarily expose a locally-running server to the internet. Well do that for this example you may need to install ngrok and create a free account, but you can use any other method to deploy your server. Assuming you saved the above code as server.py , you can run the following two commands in two separate terminals to deploy your server and expose it to the internet This exposes your unauthenticated server to the internet. Only run this command in a safe environment if you understand the risks. To use the Responses API, youll need to install the OpenAI Python SDK not included with FastMCP Youll also need to authenticate with OpenAI. You can do this by setting the OPENAI_API_KEY environment variable. Consult the OpenAI SDK documentation for more information. Here is an example of how to call your server from Python. Note that youll need to replace httpsyour-server-url.com with the actual URL of your server. In addition, we use mcp as the endpoint because we deployed a streamable-HTTP server with the default path you may need to use a different endpoint if you customized your servers deployment. If you run this code, youll see something like the following output New in version 2.6.0 The Responses API can include headers to authenticate the request, which means you dont have to worry about your server being publicly accessible. The simplest way to add authentication to the server is to use a bearer token scheme. For this example, well quickly generate our own tokens with FastMCPs RSAKeyPair utility, but this may not be appropriate for production use. For more details, see the complete server-side Bearer Auth documentation. Well start by creating an RSA key pair to sign and verify tokens. FastMCPs RSAKeyPair utility is for development and testing only. Next, well create a BearerAuthProvider to authenticate the server. Here is a complete example that you can copypaste. For simplicity and the purposes of this example only, it will print the token to the console. Do NOT do this in production! If you try to call the authenticated server with the same OpenAI code we wrote earlier, youll get an error like this As expected, the server is rejecting the request because its not authenticated. To authenticate the client, you can pass the token in the Authorization header with the Bearer scheme You should now see the dice roll results in the output.

Keywords: the, server, you, api, this, with, for, openai, your, fastmcp

---

